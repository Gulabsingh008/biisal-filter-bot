import os
import asyncio
import logging
import random
import subprocess
from pyrogram import Client
from pyrogram.types import Message

# рд▓реЙрдЧ рд╕реЗрдЯрдЕрдк
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# FFmpeg рд╕реЗ рд╡реАрдбрд┐рдпреЛ рдХреА рд▓рдВрдмрд╛рдИ (рдбреНрдпреВрд░реЗрд╢рди) рдирд┐рдХрд╛рд▓рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
async def get_video_duration(video_path):
    try:
        cmd = [
            "ffprobe", "-i", video_path,
            "-show_entries", "format=duration",
            "-v", "quiet", "-of", "csv=p=0"
        ]
        process = await asyncio.create_subprocess_exec(*cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = await process.communicate()
        if process.returncode != 0:
            logger.error(f"FFprobe Error: {stderr.decode()}")
            return None
        return float(stdout.decode().strip())  # рдбреНрдпреВрд░реЗрд╢рди рд╕реЗрдХрдВрдб рдореЗрдВ рд▓реМрдЯрд╛рдПрдБ
    except Exception as e:
        logger.error(f"Error in fetching duration: {str(e)}")
        return None

# FFmpeg рд╕реЗ рд░реИрдВрдбрдо рдХреНрд▓рд┐рдк рдмрдирд╛рдиреЗ рдХрд╛ рдлрд╝рдВрдХреНрд╢рди
async def clip_video(input_file, output_file, start_time, duration):
    try:
        cmd = [
            "ffmpeg", "-i", input_file,
            "-ss", start_time, "-t", duration,
            "-c", "copy", output_file
        ]
        process = await asyncio.create_subprocess_exec(*cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = await process.communicate()

        if process.returncode != 0:
            logger.error(f"FFmpeg Error: {stderr.decode()}")
            return False
        return True
    except Exception as e:
        logger.error(f"Error in clipping video: {str(e)}")
        return False

# рд╡реАрдбрд┐рдпреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рдиреЗ рдХрд╛ рд╣реИрдВрдбрд▓рд░
async def process_video(client: Client, message: Message):
    if not message.video:
        await message.reply_text("тЭМ рдХреЛрдИ рд╡реАрдбрд┐рдпреЛ рдлрд╝рд╛рдЗрд▓ рдирд╣реАрдВ рдорд┐рд▓реА!")
        return

    video_path = await client.download_media(message.video)
    if not os.path.exists(video_path):
        await message.reply_text("тЭМ рдлрд╝рд╛рдЗрд▓ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ!")
        return

    file_name = os.path.basename(video_path)
    safe_file_name = file_name.replace("(", "").replace(")", "").replace("[", "").replace("]", "").replace(" ", "_")
    output_path = f"/app/clips/clip_{safe_file_name}"

    # рд╡реАрдбрд┐рдпреЛ рдХреА рдХреБрд▓ рд▓рдВрдмрд╛рдИ рдирд┐рдХрд╛рд▓реЗрдВ
    video_duration = await get_video_duration(video_path)
    if not video_duration:
        await message.reply_text("тЭМ рд╡реАрдбрд┐рдпреЛ рдХреА рд▓рдВрдмрд╛рдИ рдкрддрд╛ рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ!")
        return

    # 30 рд╕реЗрдХрдВрдб рдХреА рдХреНрд▓рд┐рдкрд┐рдВрдЧ рдХреЗ рд▓рд┐рдП рд░реИрдВрдбрдо рд╕реНрдЯрд╛рд░реНрдЯ рдЯрд╛рдЗрдо рд╕реЗрдЯ рдХрд░реЗрдВ
    if video_duration > 30:
        random_start = random.randint(0, int(video_duration) - 30)
    else:
        random_start = 0  # рдЕрдЧрд░ рд╡реАрдбрд┐рдпреЛ рдЫреЛрдЯрд╛ рд╣реИ, рддреЛ рд╕реНрдЯрд╛рд░реНрдЯ 0 рд╕реЗ рдХрд░реЗрдВ

    start_time = f"00:{random_start//60:02}:{random_start%60:02}"  # HH:MM:SS рдлреЙрд░реНрдореЗрдЯ рдореЗрдВ
    duration = "00:00:30"  # 30 рд╕реЗрдХрдВрдб рдХреА рдХреНрд▓рд┐рдк рдмрдирд╛рдПрдБ

    await message.reply_text(f"ЁЯОе рд░реИрдВрдбрдо рдХреНрд▓рд┐рдкрд┐рдВрдЧ рд╢реБрд░реВ рд╣реЛ рд░рд╣реА рд╣реИ: `{file_name}`\nтП│ рд╕реНрдЯрд╛рд░реНрдЯ рдЯрд╛рдЗрдо: {start_time}")

    success = await clip_video(video_path, output_path, start_time, duration)
    if not success:
        await message.reply_text("тЭМ рд╡реАрдбрд┐рдпреЛ рдХреНрд▓рд┐рдкрд┐рдВрдЧ рдореЗрдВ рд╕рдорд╕реНрдпрд╛ рд╣реБрдИ!")
        return

    await message.reply_video(output_path, caption=f"ЁЯОм Here is your random clip: `{os.path.basename(output_path)}`\nтП│ Start Time: {start_time}")
    os.remove(video_path)  # рдЕрд╕рд▓реА рд╡реАрдбрд┐рдпреЛ рд╣рдЯрд╛рдПрдБ
    os.remove(output_path)  # рдХреНрд▓рд┐рдк рд╣рдЯрд╛рдПрдБ
